Démo de la présentation "Le classpath n'est pas mort... mais presque"
---------------

Ce projet a servi pour la démo à DevoxxFR 2013

Préparation
-----------

0-Prérequis : utiliser JDK 8, Maven est configuré ainsi.

1° étape : cloner le projet. Ben oui, c'est du git.

 git clone git://github.com/hasalex/classpath-demo.git
 
 cloner et builder le projet tomcat-modules dont il depend
 cf. https://github.com/hasalex/tomcat-modules
 
 Pour cloner sous eclipse avec eGit, ajouter  à la racine le fichier .project avant d'importer le projet
 Ceci pour definir un projet maven multi-modules.

2° étape : créer un répertoire de travail

 mkdir classpath-demo-work
 cd classpath-demo-work
 sh ../classpath-demo/scripts/prepare.sh

Rem. : pour l'utiliser sous l'os windows utiliser 'git bash' : ca marche
par exemple pour setter le JAVA_HOME, ajouter en debut de script (attention au chemin des repertoires !)
export JAVA_HOME=/c/Java/jdk1.8.0_102
export PATH=$JAVA_HOME/bin:$PATH

Rem. : le script doit subir quelques améliorations, par exemple pour la copie de jboss-module.jar

Démo 1 : classpath
-----------

# Build with maven
export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
../classpath-demo/scripts/prepare-classpath.sh

# Ça ne marche pas
java fr.sewatech.classpath.example.Count 40 45

# Ça marche
java -cp lib/misc-example.jar fr.sewatech.classpath.example.Count 40 45

Démo 2 : bootclasspath
-----------

# Court-circuiter le Integer par défaut
java -Xbootclasspath/p:lib/misc-example.jar fr.sewatech.classpath.example.Count 40 45

# En théorie, le endorsed ne devrait pas avoir d'effet sur Integer. En réalité,...
java -Djava.endorsed.dirs=lib fr.sewatech.classpath.example.Count 40 45

Démo 3 : URLClassLoader
-----------

# Ça ne marche pas
java -cp lib/message-launcher.jar fr.sewatech.classpath.Hello

# Ça marche
java -cp "lib/*" fr.sewatech.classpath.Hello

# Ça marche
java -cp lib/message-launcher.jar fr.sewatech.classpath.HelloViaURL

# Ça ne marche pas
java -cp lib/message-launcher.jar:lib/message-service.jar fr.sewatech.classpath.HelloViaURL

Démo 4 : Custom ClassLoader
-----------

# Build (dans le bon répertoire)
cd ../classpath-demo; mvn install; cd ../classpath-demo-work

# Ça marche
java -cp lib/message-launcher.jar fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT
# Ça marche
java -cp lib/message-launcher.jar fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT local

# Ça ne marche pas
java -cp lib/message-launcher.jar:lib/message-service.jar fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT
# Ça marche
java -cp lib/message-launcher.jar:lib/message-service.jar fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT local

Démo 5 : jar hell
-----------

# Ça ne marche pas
java -cp "lib/*" fr.sewatech.classpath.Hello log

Démo 6 : jboss modules
-----------

# Build (dans le bon répertoire)
../classpath-demo/scripts/prepare-jboss-modules.sh

# Ça marche, comme avant (si les dépendances ont les bons slots)
java -jar jboss-modules/jboss-modules.jar -mp jboss-modules fr.sewatech.message-launcher
# Ça marche, mieux qu'avant
java -jar jboss-modules/jboss-modules.jar -mp jboss-modules fr.sewatech.message-launcher log

Démo 7 : jigsaw
-----------

# OK
java --module-path jigsaw-modules -m message.launcher/fr.sewatech.classpath.Hello
# KO
java --module-path jigsaw-modules -m message.launcher/fr.sewatech.classpath.Hello log

Démo 8 : modular JDK
-----------

# compiler misc-example sans "requires java.xml.bind"

Démo 9 : jigsaw - mode classpath
-----------

# Ça marche encore
java -cp jigsaw-modules/misc-examples.jar fr.sewatech.classpath.example.Count 40 45
java -cp "jigsaw-modules/*" fr.sewatech.classpath.Hello

# Ça ne marche plus
java -cp lib/misc-examples.jar fr.sewatech.classpath.example.JaxBExample
# Ça marche
java --add-modules java.xml.bind -cp lib/misc-examples.jar fr.sewatech.classpath.example.JaxBExample

Démo 10 : requires
-----------

# Montrer le code
# - automatic module

# Dans message-service
#   virer "requires message.common"
# => compile HS

# Dans message-printer
#   passer "requires message.common" en transitive

# static / optional
java --module-path jigsaw-modules -m misc.examples/fr.sewatech.classpath.example.JaxBExample
#   dans misc-example, mettre "requires java.xml.bind" en static
java --module-path jigsaw-modules -m misc.examples/fr.sewatech.classpath.example.JaxBExample
java --add-modules java.xml.bind --module-path jigsaw-modules -m misc.examples/fr.sewatech.classpath.example.JaxBExample

Démo 11 : export
-----------

# Patch slf4j with scripts/prepare-slf4j.sh
java --module-path jigsaw-modules -m message.launcher/fr.sewatech.classpath.Hello log
# l'erreur est plus explicite ; si on avait eu ce jar à la compilation,l'erreur aurait eu lieu à la compilation

Démo 12 : classloader
-----------

# OK
java -cp jigsaw-modules/message-launcher.jar fr.sewatech.classpath.HelloViaURL
# KO
java -cp jigsaw-modules/message-launcher.jar:lib/message-service.jar fr.sewatech.classpath.HelloViaURL

# Erreur : -Xbootclasspath/p is no longer a supported option
java -Xbootclasspath/p:jigsaw-modules/misc-examples.jar fr.sewatech.classpath.example.Count 40 45
# Erreur : -Djava.endorsed.dirs=lib is not supported
java -Djava.endorsed.dirs=lib fr.sewatech.classpath.example.Count 40 45

# Prepare patch with scripts/prepare-patch.sh
java --module-path jigsaw-modules -m misc.examples/fr.sewatech.classpath.example.Count
java --patch-module java.base=../classpath-demo/misc-examples/target/patch-classes --module-path jigsaw-modules -m misc.examples/fr.sewatech.classpath.example.Count

Annexe
-----------

# KO
java -cp lib/message-launcher.jar fr.sewatech.classpath.Hello
# OK
java -cp "lib/*" fr.sewatech.classpath.Hello
# OK
java -cp lib/message-launcher.jar fr.sewatech.classpath.HelloViaURL
# KO
java -cp lib/message-launcher.jar:lib/message-service.jar fr.sewatech.classpath.HelloViaURL
# OK
java -cp lib/message-launcher.jar fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT
# OK
java -cp lib/message-launcher.jar fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT local
# KO
java -cp lib/message-launcher.jar:lib/message-service.jar fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT
# OK
java -cp lib/message-launcher.jar:lib/message-service.jar fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT local
# KO
java -cp "lib/*" fr.sewatech.classpath.Hello log

# expliquer les modules internes (java.xml.bind)
java -cp lib/misc-examples.jar fr.sewatech.classpath.example.StandardClassLoading
java --add-modules java.xml.bind -cp lib/misc-examples.jar fr.sewatech.classpath.example.StandardClassLoading

# Build (dans le bon répertoire) avec JDK 9 avec jigsaw-nightly
export JAVA_HOME=~/Projet/hasalex/jigsaw/jdk-9b138.jdk/Contents/Home
cd ../classpath-demo; mvn clean install -Pjigsaw; cd ../classpath-demo-work

# OK
java --module-path jigsaw-modules -m message.launcher/fr.sewatech.classpath.HelloViaURL
# OK
java --module-path jigsaw-modules -m message.launcher/fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT
java --module-path jigsaw-modules -m message.launcher/fr.sewatech.classpath.HelloViaMvnRepo 2.0-SNAPSHOT local
# KO
java --module-path jigsaw-modules -m message.launcher/fr.sewatech.classpath.Hello log

# Modules vs Classpath : aucun changement visible
# classpath = unnamed module
java --add-modules java.xml.bind -cp lib/misc-examples.jar fr.sewatech.classpath.example.StandardClassLoading
java --module-path jigsaw-modules -m misc.examples/fr.sewatech.classpath.example.StandardClassLoading
